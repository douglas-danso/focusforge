version: "3.9"

services:
  # NGINX API Gateway & Load Balancer
  gateway:
    image: nginx:alpine
    container_name: focusforge-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - gateway-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: focusforge-backend
    expose:
      - "8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SPOTIPY_CLIENT_ID=${SPOTIPY_CLIENT_ID}
      - SPOTIPY_CLIENT_SECRET=${SPOTIPY_CLIENT_SECRET}
      - SPOTIPY_REDIRECT_URI=${SPOTIPY_REDIRECT_URI}
      - MONGODB_URI=mongodb://mongo:27017/focusforge
      - REDIS_URL=redis://redis:6379
      - DATABASE_NAME=focusforge
      - CORS_ORIGINS=https://focusforge.com,http://localhost:3000
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_V1_STR=/api/v1
    networks:
      - gateway-network
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: focusforge-frontend
    expose:
      - "80"
    environment:
      - REACT_APP_API_URL=/api/v1
      - REACT_APP_WEBSOCKET_URL=/ws
      - NODE_ENV=production
    networks:
      - gateway-network
    restart: unless-stopped

  # MongoDB Database
  mongo:
    image: mongo:6.0
    container_name: focusforge-mongo
    restart: always
    expose:
      - "27017"
    volumes:
      - mongo_data:/data/db
      - ./infrastructure/mongo/init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_DATABASE=focusforge
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - backend-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: focusforge-redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - backend-network
    command: redis-server /etc/redis/redis.conf

  # MongoDB Backup Service
  mongo-backup:
    image: alpine:latest
    container_name: focusforge-backup
    volumes:
      - mongo_data:/data/db:ro
      - ./backups:/backups
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=focusforge
      - BACKUP_CRON=${BACKUP_CRON:-0 2 * * *}
    networks:
      - backend-network
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache mongodb-tools dcron
        echo "$BACKUP_CRON /usr/bin/mongodump --host $MONGO_HOST:$MONGO_PORT --db $MONGO_DB --out /backups/\$$(date +%Y%m%d_%H%M%S)" | crontab -
        crond -f
      '

volumes:
  mongo_data:
  redis_data:

networks:
  gateway-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true
