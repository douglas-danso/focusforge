# services:
#   # Load Balancer
#   nginx:
#     image: nginx:alpine
#     container_name: focusforge-loadbalancer
#     ports:
#       - "8004:80"
#       - "8443:443"
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro
#       - ./ssl:/etc/ssl:ro
#     depends_on:
#       - backend-1
#       - backend-2
#     networks:
#       - frontend-network
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "nginx", "-t"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   # Backend instances (scaled horizontally)
#   backend-1: &backend-template
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     container_name: focusforge-backend-1
#     environment: &backend-env
#       MONGODB_URI: mongodb://mongo-primary:27017,mongo-secondary:27017/focusforge?replicaSet=rs0
#       REDIS_URL: redis://redis-master:6379
#       OPENAI_API_KEY: ${OPENAI_API_KEY}
#       SPOTIPY_CLIENT_ID: ${SPOTIPY_CLIENT_ID}
#       SPOTIPY_CLIENT_SECRET: ${SPOTIPY_CLIENT_SECRET}
#       GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
#       GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
#       JWT_SECRET_KEY: ${JWT_SECRET_KEY}
#       DATABASE_NAME: ${DATABASE_NAME:-focusforge}
#       CORS_ORIGINS: ${CORS_ORIGINS:-*}
#       INSTANCE_ID: backend-1
#     volumes:
#       - backend-data-1:/app/data
#       - backend-logs-1:/app/logs
#     deploy: &backend-resources
#       resources:
#         limits:
#           memory: 2G
#           cpus: '1.0'
#         reservations:
#           memory: 1G
#           cpus: '0.5'
#     networks:
#       - backend-network
#       - frontend-network
#     depends_on:
#       - mongo-primary
#       - redis-master
#     restart: unless-stopped
#     healthcheck: &backend-healthcheck
#       test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 60s

#   backend-2:
#     <<: *backend-template
#     container_name: focusforge-backend-2
#     environment:
#       <<: *backend-env
#       INSTANCE_ID: backend-2
#     volumes:
#       - backend-data-2:/app/data
#       - backend-logs-2:/app/logs

#   # MongoDB Replica Set
#   mongo-primary: &mongo-template
#     image: mongo:6.0
#     container_name: focusforge-mongo-primary
#     command: mongod --replSet rs0 --bind_ip_all --port 27017
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo-primary-data:/data/db
#       - mongo-primary-config:/data/configdb
#     environment: &mongo-env
#       MONGO_INITDB_DATABASE: ${DATABASE_NAME:-focusforge}
#       MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-}
#       MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-}
#     networks:
#       - backend-network
#     restart: unless-stopped
#     healthcheck: &mongo-healthcheck
#       test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 40s

#   mongo-secondary:
#     <<: *mongo-template
#     container_name: focusforge-mongo-secondary
#     ports:
#       - "27018:27017"
#     volumes:
#       - mongo-secondary-data:/data/db
#       - mongo-secondary-config:/data/configdb
#     environment:
#       MONGO_INITDB_DATABASE: ${DATABASE_NAME:-focusforge}
#     depends_on:
#       - mongo-primary

#   # MongoDB replica set initialization
#   mongo-setup:
#     image: mongo:6.0
#     container_name: focusforge-mongo-setup
#     depends_on:
#       mongo-primary:
#         condition: service_healthy
#       mongo-secondary:
#         condition: service_healthy
#     networks:
#       - backend-network
#     restart: "no"
#     entrypoint: |
#       bash -c "
#         echo 'Waiting for MongoDB instances to be ready...' &&
#         sleep 15 &&
#         echo 'Initializing replica set...' &&
#         mongosh --host mongo-primary:27017 --eval '
#           try {
#             const status = rs.status();
#             print(\"Replica set already initialized\");
#           } catch(e) {
#             print(\"Initializing new replica set...\");
#             const result = rs.initiate({
#               _id: \"rs0\",
#               members: [
#                 {_id: 0, host: \"mongo-primary:27017\", priority: 10},
#                 {_id: 1, host: \"mongo-secondary:27017\", priority: 5}
#               ]
#             });
#             print(\"Replica set initialization result: \" + JSON.stringify(result));
            
#             // Wait for primary election
#             print(\"Waiting for primary election...\");
#             let attempts = 0;
#             while (attempts < 30) {
#               try {
#                 const status = rs.status();
#                 const primary = status.members.find(m => m.stateStr === \"PRIMARY\");
#                 if (primary) {
#                   print(\"Primary elected: \" + primary.name);
#                   break;
#                 }
#               } catch(e) {}
#               sleep(1000);
#               attempts++;
#             }
#           }
#         ' &&
#         echo 'Setup complete'
#       "

#   # Redis Master-Slave
#   redis-master: &redis-template
#     image: redis:7-alpine
#     container_name: focusforge-redis-master
#     command: redis-server --appendonly yes --replica-announce-ip redis-master --replica-announce-port 6379
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis-master-data:/data
#     networks:
#       - backend-network
#     restart: unless-stopped
#     healthcheck: &redis-healthcheck
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   redis-slave:
#     <<: *redis-template
#     container_name: focusforge-redis-slave
#     command: redis-server --appendonly yes --replicaof redis-master 6379
#     ports:
#       - "6380:6379"
#     volumes:
#       - redis-slave-data:/data
#     depends_on:
#       - redis-master

#   # Background Workers
#   worker-general: &worker-template
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     container_name: focusforge-worker-general
#     command: python -m rq worker focusforge_tasks --with-scheduler --verbose
#     environment: &worker-env
#       MONGODB_URI: mongodb://mongo-primary:27017,mongo-secondary:27017/focusforge?replicaSet=rs0
#       REDIS_URL: redis://redis-master:6379
#       OPENAI_API_KEY: ${OPENAI_API_KEY}
#       DATABASE_NAME: ${DATABASE_NAME:-focusforge}
#       WORKER_TYPE: general
#       WORKER_ID: general-1
#     volumes: &worker-volumes
#       - worker-data:/app/data
#       - worker-logs:/app/logs
#     depends_on:
#       - redis-master
#       - mongo-primary
#     networks:
#       - backend-network
#     restart: unless-stopped
#     deploy: &worker-resources
#       resources:
#         limits:
#           memory: 1G
#           cpus: '0.5'

#   worker-ai:
#     <<: *worker-template
#     container_name: focusforge-worker-ai
#     command: python -m rq worker ai_tasks --verbose
#     environment:
#       <<: *worker-env
#       WORKER_TYPE: ai_processing
#       WORKER_ID: ai-1

#   # Monitoring Stack
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: focusforge-prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#       - prometheus-data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--storage.tsdb.retention.time=200h'
#       - '--web.enable-lifecycle'
#     networks:
#       - monitoring-network
#       - backend-network
#     restart: unless-stopped

#   grafana:
#     image: grafana/grafana:latest
#     container_name: focusforge-grafana
#     ports:
#       - "3001:3000"
#     environment:
#       GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
#     volumes:
#       - grafana-data:/var/lib/grafana
#       - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
#       - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
#     networks:
#       - monitoring-network
#     depends_on:
#       - prometheus
#     restart: unless-stopped

# # Volume definitions (unchanged)
# volumes:
#   mongo-primary-data:
#   mongo-secondary-data:
#   mongo-primary-config:
#   mongo-secondary-config:
#   redis-master-data:
#   redis-slave-data:
#   backend-data-1:
#   backend-data-2:
#   backend-logs-1:
#   backend-logs-2:
#   worker-data:
#   worker-logs:
#   prometheus-data:
#   grafana-data:

# # Network definitions (simplified)
# networks:
#   frontend-network:
#     driver: bridge
#   backend-network:
#     driver: bridge
#   monitoring-network:
#     driver: bridge

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: focusforge-loadbalancer
    ports:
      - "8004:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-1
      - backend-2
    networks:
      - frontend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend instances (scaled horizontally)
  backend-1: &backend-template
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: focusforge-backend-1
    environment: &backend-env
      MONGODB_URI: mongodb://mongo-primary:27017,mongo-secondary:27017/focusforge?replicaSet=rs0
      REDIS_URL: redis://redis-master:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SPOTIPY_CLIENT_ID: ${SPOTIPY_CLIENT_ID}
      SPOTIPY_CLIENT_SECRET: ${SPOTIPY_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-252360340708-i76a2nhg5cllpgg16t70a9lahi2dosjn.apps.googleusercontent.com}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-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}
      GOOGLE_CREDENTIALS: '{"web":{"client_id":"252360340708-i76a2nhg5cllpgg16t70a9lahi2dosjn.apps.googleusercontent.com","project_id":"focusforge-469802","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","redirect_uris":["http://localhost:3000/auth/callback"]}}'
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      GOOGLE_CREDENTIALS_DIR: ${GOOGLE_CREDENTIALS_DIR:-./credentials}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DATABASE_NAME: ${DATABASE_NAME:-focusforge}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      INSTANCE_ID: backend-1
    volumes:
      - backend-data-1:/app/data
      - backend-logs-1:/app/logs
      # Development volume mounts for live code updates
      - ./backend/app:/app/app:ro
      - ./backend/main.py:/app/main.py:ro
    deploy: &backend-resources
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - backend-network
      - frontend-network
    depends_on:
      - mongo-primary
      - redis-master
    restart: unless-stopped
    healthcheck: &backend-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-2:
    <<: *backend-template
    container_name: focusforge-backend-2
    environment:
      <<: *backend-env
      INSTANCE_ID: backend-2
    volumes:
      - backend-data-2:/app/data
      - backend-logs-2:/app/logs
      # Development volume mounts for live code updates
      - ./backend/app:/app/app:ro
      - ./backend/main.py:/app/main.py:ro

  # MongoDB Replica Set
  mongo-primary: &mongo-template
    image: mongo:6.0
    container_name: focusforge-mongo-primary
    command: mongod --replSet rs0 --bind_ip_all --port 27017
    ports:
      - "27017:27017"
    volumes:
      - mongo-primary-data:/data/db
      - mongo-primary-config:/data/configdb
    environment: &mongo-env
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-focusforge}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-}
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck: &mongo-healthcheck
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongo-secondary:
    <<: *mongo-template
    container_name: focusforge-mongo-secondary
    ports:
      - "27018:27017"
    volumes:
      - mongo-secondary-data:/data/db
      - mongo-secondary-config:/data/configdb
    environment:
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-focusforge}
    depends_on:
      - mongo-primary

  # MongoDB replica set initialization
  mongo-setup:
    image: mongo:6.0
    container_name: focusforge-mongo-setup
    depends_on:
      mongo-primary:
        condition: service_healthy
      mongo-secondary:
        condition: service_healthy
    networks:
      - backend-network
    restart: "no"
    entrypoint: |
      bash -c "
        echo 'Waiting for MongoDB instances to be ready...' &&
        sleep 15 &&
        echo 'Initializing replica set...' &&
        mongosh --host mongo-primary:27017 --eval '
          try {
            const status = rs.status();
            print(\"Replica set already initialized\");
          } catch(e) {
            print(\"Initializing new replica set...\");
            const result = rs.initiate({
              _id: \"rs0\",
              members: [
                {_id: 0, host: \"mongo-primary:27017\", priority: 10},
                {_id: 1, host: \"mongo-secondary:27017\", priority: 5}
              ]
            });
            print(\"Replica set initialization result: \" + JSON.stringify(result));
            
            // Wait for primary election
            print(\"Waiting for primary election...\");
            let attempts = 0;
            while (attempts < 30) {
              try {
                const status = rs.status();
                const primary = status.members.find(m => m.stateStr === \"PRIMARY\");
                if (primary) {
                  print(\"Primary elected: \" + primary.name);
                  break;
                }
              } catch(e) {}
              sleep(1000);
              attempts++;
            }
          }
        ' &&
        echo 'Setup complete'
      "

  # Redis Master-Slave
  redis-master: &redis-template
    image: redis:7-alpine
    container_name: focusforge-redis-master
    command: redis-server --appendonly yes --replica-announce-ip redis-master --replica-announce-port 6379
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck: &redis-healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-slave:
    <<: *redis-template
    container_name: focusforge-redis-slave
    command: redis-server --appendonly yes --replicaof redis-master 6379
    ports:
      - "6380:6379"
    volumes:
      - redis-slave-data:/data
    depends_on:
      - redis-master

  # Background Workers
  worker-general: &worker-template
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: focusforge-worker-general
    command: python -m rq worker focusforge_tasks --with-scheduler --verbose
    environment: &worker-env
      MONGODB_URI: mongodb://mongo-primary:27017,mongo-secondary:27017/focusforge?replicaSet=rs0
      REDIS_URL: redis://redis-master:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DATABASE_NAME: ${DATABASE_NAME:-focusforge}
      WORKER_TYPE: general
      WORKER_ID: general-1
    volumes: &worker-volumes
      - worker-data:/app/data
      - worker-logs:/app/logs
    depends_on:
      - redis-master
      - mongo-primary
    networks:
      - backend-network
    restart: unless-stopped
    deploy: &worker-resources
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  worker-ai:
    <<: *worker-template
    container_name: focusforge-worker-ai
    command: python -m rq worker ai_tasks --verbose
    environment:
      <<: *worker-env
      WORKER_TYPE: ai_processing
      WORKER_ID: ai-1

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: focusforge-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring-network
      - backend-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: focusforge-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    restart: unless-stopped

# Volume definitions (unchanged)
volumes:
  mongo-primary-data:
  mongo-secondary-data:
  mongo-primary-config:
  mongo-secondary-config:
  redis-master-data:
  redis-slave-data:
  backend-data-1:
  backend-data-2:
  backend-logs-1:
  backend-logs-2:
  worker-data:
  worker-logs:
  prometheus-data:
  grafana-data:

# Network definitions (simplified)
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  monitoring-network:
    driver: bridge